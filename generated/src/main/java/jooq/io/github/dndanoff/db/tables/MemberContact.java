/*
 * This file is generated by jOOQ.
 */
package io.github.dndanoff.db.tables;


import io.github.dndanoff.db.Indexes;
import io.github.dndanoff.db.Keys;
import io.github.dndanoff.db.LocalEmployees;
import io.github.dndanoff.db.tables.records.MemberContactRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MemberContact extends TableImpl<MemberContactRecord> {

    private static final long serialVersionUID = 210132670;

    /**
     * The reference instance of <code>local_employees.MEMBER_CONTACT</code>
     */
    public static final MemberContact MEMBER_CONTACT = new MemberContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MemberContactRecord> getRecordType() {
        return MemberContactRecord.class;
    }

    /**
     * The column <code>local_employees.MEMBER_CONTACT.ID</code>.
     */
    public final TableField<MemberContactRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>local_employees.MEMBER_CONTACT.MEMBER_ID</code>.
     */
    public final TableField<MemberContactRecord, Long> MEMBER_ID = createField("MEMBER_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>local_employees.MEMBER_CONTACT.CONTACT_TYPE_ID</code>.
     */
    public final TableField<MemberContactRecord, Long> CONTACT_TYPE_ID = createField("CONTACT_TYPE_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>local_employees.MEMBER_CONTACT.VALUE</code>.
     */
    public final TableField<MemberContactRecord, String> VALUE = createField("VALUE", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * Create a <code>local_employees.MEMBER_CONTACT</code> table reference
     */
    public MemberContact() {
        this(DSL.name("MEMBER_CONTACT"), null);
    }

    /**
     * Create an aliased <code>local_employees.MEMBER_CONTACT</code> table reference
     */
    public MemberContact(String alias) {
        this(DSL.name(alias), MEMBER_CONTACT);
    }

    /**
     * Create an aliased <code>local_employees.MEMBER_CONTACT</code> table reference
     */
    public MemberContact(Name alias) {
        this(alias, MEMBER_CONTACT);
    }

    private MemberContact(Name alias, Table<MemberContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private MemberContact(Name alias, Table<MemberContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MemberContact(Table<O> child, ForeignKey<O, MemberContactRecord> key) {
        super(child, key, MEMBER_CONTACT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return LocalEmployees.LOCAL_EMPLOYEES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_3, Indexes.FK_CONTACT_MEMBER_INDEX_3, Indexes.FK_CONTACT_TYPE_INDEX_3, Indexes.PRIMARY_KEY_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MemberContactRecord, Long> getIdentity() {
        return Keys.IDENTITY_MEMBER_CONTACT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MemberContactRecord> getPrimaryKey() {
        return Keys.MEMBER_CONTACT_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MemberContactRecord>> getKeys() {
        return Arrays.<UniqueKey<MemberContactRecord>>asList(Keys.MEMBER_CONTACT_PK, Keys.CONSTRAINT_3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MemberContactRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MemberContactRecord, ?>>asList(Keys.FK_CONTACT_MEMBER, Keys.FK_CONTACT_TYPE);
    }

    public Member member() {
        return new Member(this, Keys.FK_CONTACT_MEMBER);
    }

    public ContactType contactType() {
        return new ContactType(this, Keys.FK_CONTACT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MemberContact as(String alias) {
        return new MemberContact(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MemberContact as(Name alias) {
        return new MemberContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberContact rename(String name) {
        return new MemberContact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MemberContact rename(Name name) {
        return new MemberContact(name, null);
    }
}
