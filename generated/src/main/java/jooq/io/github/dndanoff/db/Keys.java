/*
 * This file is generated by jOOQ.
 */
package io.github.dndanoff.db;


import io.github.dndanoff.db.tables.ContactType;
import io.github.dndanoff.db.tables.FlywaySchemaHistory;
import io.github.dndanoff.db.tables.Member;
import io.github.dndanoff.db.tables.MemberContact;
import io.github.dndanoff.db.tables.MemberTechnology;
import io.github.dndanoff.db.tables.Technology;
import io.github.dndanoff.db.tables.Title;
import io.github.dndanoff.db.tables.records.ContactTypeRecord;
import io.github.dndanoff.db.tables.records.FlywaySchemaHistoryRecord;
import io.github.dndanoff.db.tables.records.MemberContactRecord;
import io.github.dndanoff.db.tables.records.MemberRecord;
import io.github.dndanoff.db.tables.records.MemberTechnologyRecord;
import io.github.dndanoff.db.tables.records.TechnologyRecord;
import io.github.dndanoff.db.tables.records.TitleRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>local_employees</code> schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<MemberRecord, Long> IDENTITY_MEMBER = Identities0.IDENTITY_MEMBER;
    public static final Identity<MemberContactRecord, Long> IDENTITY_MEMBER_CONTACT = Identities0.IDENTITY_MEMBER_CONTACT;
    public static final Identity<MemberTechnologyRecord, Long> IDENTITY_MEMBER_TECHNOLOGY = Identities0.IDENTITY_MEMBER_TECHNOLOGY;
    public static final Identity<TechnologyRecord, Long> IDENTITY_TECHNOLOGY = Identities0.IDENTITY_TECHNOLOGY;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<ContactTypeRecord> CONTACT_TYPE_PK = UniqueKeys0.CONTACT_TYPE_PK;
    public static final UniqueKey<ContactTypeRecord> CONSTRAINT_D = UniqueKeys0.CONSTRAINT_D;
    public static final UniqueKey<ContactTypeRecord> UC_CONTACT_NAME = UniqueKeys0.UC_CONTACT_NAME;
    public static final UniqueKey<MemberRecord> MEMBER_PK = UniqueKeys0.MEMBER_PK;
    public static final UniqueKey<MemberContactRecord> MEMBER_CONTACT_PK = UniqueKeys0.MEMBER_CONTACT_PK;
    public static final UniqueKey<MemberContactRecord> CONSTRAINT_3 = UniqueKeys0.CONSTRAINT_3;
    public static final UniqueKey<MemberTechnologyRecord> MEMBER_TECHNOLOGY_PK = UniqueKeys0.MEMBER_TECHNOLOGY_PK;
    public static final UniqueKey<TechnologyRecord> TECHNOLOGY_PK = UniqueKeys0.TECHNOLOGY_PK;
    public static final UniqueKey<TechnologyRecord> UC_TECH_NAME = UniqueKeys0.UC_TECH_NAME;
    public static final UniqueKey<TitleRecord> TITLE_PK = UniqueKeys0.TITLE_PK;
    public static final UniqueKey<TitleRecord> CONSTRAINT_4 = UniqueKeys0.CONSTRAINT_4;
    public static final UniqueKey<TitleRecord> UC_TITLE_NAME = UniqueKeys0.UC_TITLE_NAME;
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = UniqueKeys0.FLYWAY_SCHEMA_HISTORY_PK;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<MemberRecord, TitleRecord> FK_TITLE = ForeignKeys0.FK_TITLE;
    public static final ForeignKey<MemberContactRecord, MemberRecord> FK_CONTACT_MEMBER = ForeignKeys0.FK_CONTACT_MEMBER;
    public static final ForeignKey<MemberContactRecord, ContactTypeRecord> FK_CONTACT_TYPE = ForeignKeys0.FK_CONTACT_TYPE;
    public static final ForeignKey<MemberTechnologyRecord, MemberRecord> FK_TECHNOLOGY_MEMBER = ForeignKeys0.FK_TECHNOLOGY_MEMBER;
    public static final ForeignKey<MemberTechnologyRecord, TechnologyRecord> FK_TECHNOLOGY = ForeignKeys0.FK_TECHNOLOGY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<MemberRecord, Long> IDENTITY_MEMBER = Internal.createIdentity(Member.MEMBER, Member.MEMBER.ID);
        public static Identity<MemberContactRecord, Long> IDENTITY_MEMBER_CONTACT = Internal.createIdentity(MemberContact.MEMBER_CONTACT, MemberContact.MEMBER_CONTACT.ID);
        public static Identity<MemberTechnologyRecord, Long> IDENTITY_MEMBER_TECHNOLOGY = Internal.createIdentity(MemberTechnology.MEMBER_TECHNOLOGY, MemberTechnology.MEMBER_TECHNOLOGY.ID);
        public static Identity<TechnologyRecord, Long> IDENTITY_TECHNOLOGY = Internal.createIdentity(Technology.TECHNOLOGY, Technology.TECHNOLOGY.ID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<ContactTypeRecord> CONTACT_TYPE_PK = Internal.createUniqueKey(ContactType.CONTACT_TYPE, "CONTACT_TYPE_PK", ContactType.CONTACT_TYPE.ID);
        public static final UniqueKey<ContactTypeRecord> CONSTRAINT_D = Internal.createUniqueKey(ContactType.CONTACT_TYPE, "CONSTRAINT_D", ContactType.CONTACT_TYPE.ID);
        public static final UniqueKey<ContactTypeRecord> UC_CONTACT_NAME = Internal.createUniqueKey(ContactType.CONTACT_TYPE, "UC_CONTACT_NAME", ContactType.CONTACT_TYPE.NAME);
        public static final UniqueKey<MemberRecord> MEMBER_PK = Internal.createUniqueKey(Member.MEMBER, "MEMBER_PK", Member.MEMBER.ID);
        public static final UniqueKey<MemberContactRecord> MEMBER_CONTACT_PK = Internal.createUniqueKey(MemberContact.MEMBER_CONTACT, "MEMBER_CONTACT_PK", MemberContact.MEMBER_CONTACT.ID);
        public static final UniqueKey<MemberContactRecord> CONSTRAINT_3 = Internal.createUniqueKey(MemberContact.MEMBER_CONTACT, "CONSTRAINT_3", MemberContact.MEMBER_CONTACT.VALUE);
        public static final UniqueKey<MemberTechnologyRecord> MEMBER_TECHNOLOGY_PK = Internal.createUniqueKey(MemberTechnology.MEMBER_TECHNOLOGY, "MEMBER_TECHNOLOGY_PK", MemberTechnology.MEMBER_TECHNOLOGY.ID);
        public static final UniqueKey<TechnologyRecord> TECHNOLOGY_PK = Internal.createUniqueKey(Technology.TECHNOLOGY, "TECHNOLOGY_PK", Technology.TECHNOLOGY.ID);
        public static final UniqueKey<TechnologyRecord> UC_TECH_NAME = Internal.createUniqueKey(Technology.TECHNOLOGY, "UC_TECH_NAME", Technology.TECHNOLOGY.NAME);
        public static final UniqueKey<TitleRecord> TITLE_PK = Internal.createUniqueKey(Title.TITLE, "TITLE_PK", Title.TITLE.ID);
        public static final UniqueKey<TitleRecord> CONSTRAINT_4 = Internal.createUniqueKey(Title.TITLE, "CONSTRAINT_4", Title.TITLE.ID);
        public static final UniqueKey<TitleRecord> UC_TITLE_NAME = Internal.createUniqueKey(Title.TITLE, "UC_TITLE_NAME", Title.TITLE.NAME);
        public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, "flyway_schema_history_pk", FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<MemberRecord, TitleRecord> FK_TITLE = Internal.createForeignKey(io.github.dndanoff.db.Keys.CONSTRAINT_4, Member.MEMBER, "FK_TITLE", Member.MEMBER.TITLE_ID);
        public static final ForeignKey<MemberContactRecord, MemberRecord> FK_CONTACT_MEMBER = Internal.createForeignKey(io.github.dndanoff.db.Keys.MEMBER_PK, MemberContact.MEMBER_CONTACT, "FK_CONTACT_MEMBER", MemberContact.MEMBER_CONTACT.MEMBER_ID);
        public static final ForeignKey<MemberContactRecord, ContactTypeRecord> FK_CONTACT_TYPE = Internal.createForeignKey(io.github.dndanoff.db.Keys.CONSTRAINT_D, MemberContact.MEMBER_CONTACT, "FK_CONTACT_TYPE", MemberContact.MEMBER_CONTACT.CONTACT_TYPE_ID);
        public static final ForeignKey<MemberTechnologyRecord, MemberRecord> FK_TECHNOLOGY_MEMBER = Internal.createForeignKey(io.github.dndanoff.db.Keys.MEMBER_PK, MemberTechnology.MEMBER_TECHNOLOGY, "FK_TECHNOLOGY_MEMBER", MemberTechnology.MEMBER_TECHNOLOGY.MEMBER_ID);
        public static final ForeignKey<MemberTechnologyRecord, TechnologyRecord> FK_TECHNOLOGY = Internal.createForeignKey(io.github.dndanoff.db.Keys.TECHNOLOGY_PK, MemberTechnology.MEMBER_TECHNOLOGY, "FK_TECHNOLOGY", MemberTechnology.MEMBER_TECHNOLOGY.TECHNOLOGY_ID);
    }
}
