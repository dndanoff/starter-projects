/*
 * This file is generated by jOOQ.
 */
package io.github.dndanoff.db.tables;


import io.github.dndanoff.db.Indexes;
import io.github.dndanoff.db.Keys;
import io.github.dndanoff.db.LocalEmployees;
import io.github.dndanoff.db.tables.records.ContactTypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactType extends TableImpl<ContactTypeRecord> {

    private static final long serialVersionUID = 1811034542;

    /**
     * The reference instance of <code>local_employees.CONTACT_TYPE</code>
     */
    public static final ContactType CONTACT_TYPE = new ContactType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactTypeRecord> getRecordType() {
        return ContactTypeRecord.class;
    }

    /**
     * The column <code>local_employees.CONTACT_TYPE.ID</code>.
     */
    public final TableField<ContactTypeRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>local_employees.CONTACT_TYPE.NAME</code>.
     */
    public final TableField<ContactTypeRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>local_employees.CONTACT_TYPE.PRIORITY</code>.
     */
    public final TableField<ContactTypeRecord, Integer> PRIORITY = createField("PRIORITY", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("99", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>local_employees.CONTACT_TYPE.DESCRIPTION</code>.
     */
    public final TableField<ContactTypeRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>local_employees.CONTACT_TYPE</code> table reference
     */
    public ContactType() {
        this(DSL.name("CONTACT_TYPE"), null);
    }

    /**
     * Create an aliased <code>local_employees.CONTACT_TYPE</code> table reference
     */
    public ContactType(String alias) {
        this(DSL.name(alias), CONTACT_TYPE);
    }

    /**
     * Create an aliased <code>local_employees.CONTACT_TYPE</code> table reference
     */
    public ContactType(Name alias) {
        this(alias, CONTACT_TYPE);
    }

    private ContactType(Name alias, Table<ContactTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContactType(Name alias, Table<ContactTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ContactType(Table<O> child, ForeignKey<O, ContactTypeRecord> key) {
        super(child, key, CONTACT_TYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return LocalEmployees.LOCAL_EMPLOYEES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_D, Indexes.PRIMARY_KEY_D, Indexes.UC_CONTACT_NAME_INDEX_D);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContactTypeRecord> getPrimaryKey() {
        return Keys.CONTACT_TYPE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContactTypeRecord>> getKeys() {
        return Arrays.<UniqueKey<ContactTypeRecord>>asList(Keys.CONTACT_TYPE_PK, Keys.CONSTRAINT_D, Keys.UC_CONTACT_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactType as(String alias) {
        return new ContactType(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContactType as(Name alias) {
        return new ContactType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactType rename(String name) {
        return new ContactType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactType rename(Name name) {
        return new ContactType(name, null);
    }
}
