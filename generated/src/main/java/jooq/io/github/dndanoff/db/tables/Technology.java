/*
 * This file is generated by jOOQ.
 */
package io.github.dndanoff.db.tables;


import io.github.dndanoff.db.Indexes;
import io.github.dndanoff.db.Keys;
import io.github.dndanoff.db.LocalEmployees;
import io.github.dndanoff.db.tables.records.TechnologyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Technology extends TableImpl<TechnologyRecord> {

    private static final long serialVersionUID = 412653276;

    /**
     * The reference instance of <code>local_employees.TECHNOLOGY</code>
     */
    public static final Technology TECHNOLOGY = new Technology();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TechnologyRecord> getRecordType() {
        return TechnologyRecord.class;
    }

    /**
     * The column <code>local_employees.TECHNOLOGY.ID</code>.
     */
    public final TableField<TechnologyRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>local_employees.TECHNOLOGY.NAME</code>.
     */
    public final TableField<TechnologyRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>local_employees.TECHNOLOGY.DISPLAY_NAME</code>.
     */
    public final TableField<TechnologyRecord, String> DISPLAY_NAME = createField("DISPLAY_NAME", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>local_employees.TECHNOLOGY.DESCRIPTION</code>.
     */
    public final TableField<TechnologyRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>local_employees.TECHNOLOGY</code> table reference
     */
    public Technology() {
        this(DSL.name("TECHNOLOGY"), null);
    }

    /**
     * Create an aliased <code>local_employees.TECHNOLOGY</code> table reference
     */
    public Technology(String alias) {
        this(DSL.name(alias), TECHNOLOGY);
    }

    /**
     * Create an aliased <code>local_employees.TECHNOLOGY</code> table reference
     */
    public Technology(Name alias) {
        this(alias, TECHNOLOGY);
    }

    private Technology(Name alias, Table<TechnologyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Technology(Name alias, Table<TechnologyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Technology(Table<O> child, ForeignKey<O, TechnologyRecord> key) {
        super(child, key, TECHNOLOGY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return LocalEmployees.LOCAL_EMPLOYEES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_B, Indexes.UC_TECH_NAME_INDEX_B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TechnologyRecord, Long> getIdentity() {
        return Keys.IDENTITY_TECHNOLOGY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TechnologyRecord> getPrimaryKey() {
        return Keys.TECHNOLOGY_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TechnologyRecord>> getKeys() {
        return Arrays.<UniqueKey<TechnologyRecord>>asList(Keys.TECHNOLOGY_PK, Keys.UC_TECH_NAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Technology as(String alias) {
        return new Technology(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Technology as(Name alias) {
        return new Technology(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Technology rename(String name) {
        return new Technology(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Technology rename(Name name) {
        return new Technology(name, null);
    }
}
